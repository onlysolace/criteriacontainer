#summary Release Notes

== Release 0.1.1 ==
  * Enabled sorting.  The sort() routine was not being called.
  * Character set of source files set to UTF-8
  
== Release 0.1.0 ==
  * Initial Release
  
  * Added ability to define JPA 2.0 type-safe Criteria query
    Programming a query is done essentially by defining predicates
    
		// WHERE t.name LIKE ...
		Predicate condition = cb.like(
				t.get(Task_.name), // t.name
				nameFilterValue);  // "like" pattern to be matched
		filterExpressions.add(condition);
	
	The SQL is entirely generated by the Criteria API.  There is no text string manipulation
	to build a query.  The use of Java variables such as Task_.name will give a compile-time
	error where the	@Entity classes have changed, but the queries have not been updated.
	The variables are generated automatically by Maven or the IDE (see next item)
    
  * Tested with Hibernate; used Eclipse annotation processing to generate the JPA Metamodel
    (see http://docs.jboss.org/hibernate/jpamodelgen/1.0/reference/en-US/html_single/ for use
    with pure Maven)
    
  * For situations that do not warrant full type-safe filtering, a replacement for the filter() method
    from the EntityContainer is provided. A list of restrictions is defined. The objective
    is to avoid any textual manipulation of SQL: the restrictions become JPA Predicate objects.
    
		final LinkedList<CritRestriction> restrictions = new LinkedList<CritRestriction>();
		restrictions.add(new CritRestriction("betaz", CritRestriction.Operation.GE, 9996));
		criteriaContainer.filter(restrictions);
	
	In such a query, there will be an exception if "betaz" is not a defined property in the container.
	
  * In this release, the Filterable interface is not implemented, but at first analysis it appears
    feasible to add it in a compatible way (allowing additional user-controled filtering out of the box).